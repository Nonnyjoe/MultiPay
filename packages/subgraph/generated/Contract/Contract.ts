// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class planActive extends ethereum.Event {
  get params(): planActive__Params {
    return new planActive__Params(this);
  }
}

export class planActive__Params {
  _event: planActive;

  constructor(event: planActive) {
    this._event = event;
  }

  get planId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get planActive(): boolean {
    return this._event.parameters[1].value.toBoolean();
  }
}

export class planCreated extends ethereum.Event {
  get params(): planCreated__Params {
    return new planCreated__Params(this);
  }
}

export class planCreated__Params {
  _event: planCreated;

  constructor(event: planCreated) {
    this._event = event;
  }

  get name(): string {
    return this._event.parameters[0].value.toString();
  }

  get price(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get duration(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get planId(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class subscriptionsUpdated extends ethereum.Event {
  get params(): subscriptionsUpdated__Params {
    return new subscriptionsUpdated__Params(this);
  }
}

export class subscriptionsUpdated__Params {
  _event: subscriptionsUpdated;

  constructor(event: subscriptionsUpdated) {
    this._event = event;
  }

  get time(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get totalSubsUpdated(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class userRenewed extends ethereum.Event {
  get params(): userRenewed__Params {
    return new userRenewed__Params(this);
  }
}

export class userRenewed__Params {
  _event: userRenewed;

  constructor(event: userRenewed) {
    this._event = event;
  }

  get planId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get userAddress(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get renewed(): boolean {
    return this._event.parameters[2].value.toBoolean();
  }

  get startTime(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get endTime(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class userSubscribed extends ethereum.Event {
  get params(): userSubscribed__Params {
    return new userSubscribed__Params(this);
  }
}

export class userSubscribed__Params {
  _event: userSubscribed;

  constructor(event: userSubscribed) {
    this._event = event;
  }

  get email(): string {
    return this._event.parameters[0].value.toString();
  }

  get autoSubscribe(): boolean {
    return this._event.parameters[1].value.toBoolean();
  }

  get userAddress(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get planName(): string {
    return this._event.parameters[3].value.toString();
  }
}

export class Contract__AvailablePlansResultValue0Struct extends ethereum.Tuple {
  get planName(): string {
    return this[0].toString();
  }

  get price(): BigInt {
    return this[1].toBigInt();
  }

  get planID(): BigInt {
    return this[2].toBigInt();
  }

  get planActive(): boolean {
    return this[3].toBoolean();
  }

  get planDuration(): BigInt {
    return this[4].toBigInt();
  }

  get totalSubscribers(): BigInt {
    return this[5].toBigInt();
  }
}

export class Contract__availiablePlansResult {
  value0: string;
  value1: BigInt;
  value2: BigInt;
  value3: boolean;
  value4: BigInt;
  value5: BigInt;

  constructor(
    value0: string,
    value1: BigInt,
    value2: BigInt,
    value3: boolean,
    value4: BigInt,
    value5: BigInt
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromString(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromBoolean(this.value3));
    map.set("value4", ethereum.Value.fromUnsignedBigInt(this.value4));
    map.set("value5", ethereum.Value.fromUnsignedBigInt(this.value5));
    return map;
  }

  getPlanName(): string {
    return this.value0;
  }

  getPrice(): BigInt {
    return this.value1;
  }

  getPlanID(): BigInt {
    return this.value2;
  }

  getPlanActive(): boolean {
    return this.value3;
  }

  getPlanDuration(): BigInt {
    return this.value4;
  }

  getTotalSubscribers(): BigInt {
    return this.value5;
  }
}

export class Contract__getCompanyDetailsResult {
  value0: string;
  value1: string;
  value2: Address;
  value3: Address;

  constructor(
    value0: string,
    value1: string,
    value2: Address,
    value3: Address
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromString(this.value0));
    map.set("value1", ethereum.Value.fromString(this.value1));
    map.set("value2", ethereum.Value.fromAddress(this.value2));
    map.set("value3", ethereum.Value.fromAddress(this.value3));
    return map;
  }

  getName_(): string {
    return this.value0;
  }

  getSymbol_(): string {
    return this.value1;
  }

  getAdmin_(): Address {
    return this.value2;
  }

  getCompanyAddress_(): Address {
    return this.value3;
  }
}

export class Contract__subscribersDataResult {
  value0: Address;
  value1: string;
  value2: BigInt;
  value3: BigInt;
  value4: boolean;
  value5: boolean;

  constructor(
    value0: Address,
    value1: string,
    value2: BigInt,
    value3: BigInt,
    value4: boolean,
    value5: boolean
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddress(this.value0));
    map.set("value1", ethereum.Value.fromString(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromBoolean(this.value4));
    map.set("value5", ethereum.Value.fromBoolean(this.value5));
    return map;
  }

  getUserAddress(): Address {
    return this.value0;
  }

  getUserEmail(): string {
    return this.value1;
  }

  getTimeOfSubscription(): BigInt {
    return this.value2;
  }

  getSubscriptionEnds(): BigInt {
    return this.value3;
  }

  getAutoSubscribe(): boolean {
    return this.value4;
  }

  getSubscriptionStatus(): boolean {
    return this.value5;
  }
}

export class Contract__timestampToDateResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;

  constructor(value0: BigInt, value1: BigInt, value2: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    return map;
  }

  getYear(): BigInt {
    return this.value0;
  }

  getMonth(): BigInt {
    return this.value1;
  }

  getDay(): BigInt {
    return this.value2;
  }
}

export class Contract__viewPlanResultPlanStruct extends ethereum.Tuple {
  get planName(): string {
    return this[0].toString();
  }

  get price(): BigInt {
    return this[1].toBigInt();
  }

  get planID(): BigInt {
    return this[2].toBigInt();
  }

  get planActive(): boolean {
    return this[3].toBoolean();
  }

  get planDuration(): BigInt {
    return this[4].toBigInt();
  }

  get totalSubscribers(): BigInt {
    return this[5].toBigInt();
  }
}

export class Contract extends ethereum.SmartContract {
  static bind(address: Address): Contract {
    return new Contract("Contract", address);
  }

  AvailablePlans(): Array<Contract__AvailablePlansResultValue0Struct> {
    let result = super.call(
      "AvailablePlans",
      "AvailablePlans():((string,uint256,uint256,bool,uint256,uint256)[])",
      []
    );

    return result[0].toTupleArray<Contract__AvailablePlansResultValue0Struct>();
  }

  try_AvailablePlans(): ethereum.CallResult<
    Array<Contract__AvailablePlansResultValue0Struct>
  > {
    let result = super.tryCall(
      "AvailablePlans",
      "AvailablePlans():((string,uint256,uint256,bool,uint256,uint256)[])",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      value[0].toTupleArray<Contract__AvailablePlansResultValue0Struct>()
    );
  }

  TrackDayToUsers(param0: BigInt, param1: BigInt): Address {
    let result = super.call(
      "TrackDayToUsers",
      "TrackDayToUsers(uint256,uint256):(address)",
      [
        ethereum.Value.fromUnsignedBigInt(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );

    return result[0].toAddress();
  }

  try_TrackDayToUsers(
    param0: BigInt,
    param1: BigInt
  ): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "TrackDayToUsers",
      "TrackDayToUsers(uint256,uint256):(address)",
      [
        ethereum.Value.fromUnsignedBigInt(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  activatePlan(_planId: BigInt): boolean {
    let result = super.call("activatePlan", "activatePlan(uint256):(bool)", [
      ethereum.Value.fromUnsignedBigInt(_planId)
    ]);

    return result[0].toBoolean();
  }

  try_activatePlan(_planId: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall("activatePlan", "activatePlan(uint256):(bool)", [
      ethereum.Value.fromUnsignedBigInt(_planId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  activattionStatus(param0: BigInt): boolean {
    let result = super.call(
      "activattionStatus",
      "activattionStatus(uint256):(bool)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return result[0].toBoolean();
  }

  try_activattionStatus(param0: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "activattionStatus",
      "activattionStatus(uint256):(bool)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  admin(): Address {
    let result = super.call("admin", "admin():(address)", []);

    return result[0].toAddress();
  }

  try_admin(): ethereum.CallResult<Address> {
    let result = super.tryCall("admin", "admin():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  availiablePlans(param0: BigInt): Contract__availiablePlansResult {
    let result = super.call(
      "availiablePlans",
      "availiablePlans(uint256):(string,uint256,uint256,bool,uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return new Contract__availiablePlansResult(
      result[0].toString(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toBoolean(),
      result[4].toBigInt(),
      result[5].toBigInt()
    );
  }

  try_availiablePlans(
    param0: BigInt
  ): ethereum.CallResult<Contract__availiablePlansResult> {
    let result = super.tryCall(
      "availiablePlans",
      "availiablePlans(uint256):(string,uint256,uint256,bool,uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Contract__availiablePlansResult(
        value[0].toString(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toBoolean(),
        value[4].toBigInt(),
        value[5].toBigInt()
      )
    );
  }

  deactivatePlan(_planId: BigInt): boolean {
    let result = super.call(
      "deactivatePlan",
      "deactivatePlan(uint256):(bool)",
      [ethereum.Value.fromUnsignedBigInt(_planId)]
    );

    return result[0].toBoolean();
  }

  try_deactivatePlan(_planId: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "deactivatePlan",
      "deactivatePlan(uint256):(bool)",
      [ethereum.Value.fromUnsignedBigInt(_planId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  factoryContract(): Address {
    let result = super.call(
      "factoryContract",
      "factoryContract():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_factoryContract(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "factoryContract",
      "factoryContract():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getCompanyDetails(): Contract__getCompanyDetailsResult {
    let result = super.call(
      "getCompanyDetails",
      "getCompanyDetails():(string,string,address,address)",
      []
    );

    return new Contract__getCompanyDetailsResult(
      result[0].toString(),
      result[1].toString(),
      result[2].toAddress(),
      result[3].toAddress()
    );
  }

  try_getCompanyDetails(): ethereum.CallResult<
    Contract__getCompanyDetailsResult
  > {
    let result = super.tryCall(
      "getCompanyDetails",
      "getCompanyDetails():(string,string,address,address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Contract__getCompanyDetailsResult(
        value[0].toString(),
        value[1].toString(),
        value[2].toAddress(),
        value[3].toAddress()
      )
    );
  }

  getDaysInMonth(month: BigInt, year: BigInt): BigInt {
    let result = super.call(
      "getDaysInMonth",
      "getDaysInMonth(uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(month),
        ethereum.Value.fromUnsignedBigInt(year)
      ]
    );

    return result[0].toBigInt();
  }

  try_getDaysInMonth(month: BigInt, year: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getDaysInMonth",
      "getDaysInMonth(uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(month),
        ethereum.Value.fromUnsignedBigInt(year)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  isLeapYear(year: BigInt): boolean {
    let result = super.call("isLeapYear", "isLeapYear(uint256):(bool)", [
      ethereum.Value.fromUnsignedBigInt(year)
    ]);

    return result[0].toBoolean();
  }

  try_isLeapYear(year: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall("isLeapYear", "isLeapYear(uint256):(bool)", [
      ethereum.Value.fromUnsignedBigInt(year)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  lastCallTime(): BigInt {
    let result = super.call("lastCallTime", "lastCallTime():(uint256)", []);

    return result[0].toBigInt();
  }

  try_lastCallTime(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("lastCallTime", "lastCallTime():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  name(): string {
    let result = super.call("name", "name():(string)", []);

    return result[0].toString();
  }

  try_name(): ethereum.CallResult<string> {
    let result = super.tryCall("name", "name():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  nftId(): BigInt {
    let result = super.call("nftId", "nftId():(uint256)", []);

    return result[0].toBigInt();
  }

  try_nftId(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("nftId", "nftId():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  oneMonthTimestamp(): BigInt {
    let result = super.call(
      "oneMonthTimestamp",
      "oneMonthTimestamp():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_oneMonthTimestamp(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "oneMonthTimestamp",
      "oneMonthTimestamp():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  subscribe(
    _userEmail: string,
    _autoSubscribe: boolean,
    _planId: BigInt,
    _user: Address
  ): BigInt {
    let result = super.call(
      "subscribe",
      "subscribe(string,bool,uint256,address):(uint256)",
      [
        ethereum.Value.fromString(_userEmail),
        ethereum.Value.fromBoolean(_autoSubscribe),
        ethereum.Value.fromUnsignedBigInt(_planId),
        ethereum.Value.fromAddress(_user)
      ]
    );

    return result[0].toBigInt();
  }

  try_subscribe(
    _userEmail: string,
    _autoSubscribe: boolean,
    _planId: BigInt,
    _user: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "subscribe",
      "subscribe(string,bool,uint256,address):(uint256)",
      [
        ethereum.Value.fromString(_userEmail),
        ethereum.Value.fromBoolean(_autoSubscribe),
        ethereum.Value.fromUnsignedBigInt(_planId),
        ethereum.Value.fromAddress(_user)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  subscribersData(
    param0: BigInt,
    param1: BigInt
  ): Contract__subscribersDataResult {
    let result = super.call(
      "subscribersData",
      "subscribersData(uint256,uint256):(address,string,uint256,uint256,bool,bool)",
      [
        ethereum.Value.fromUnsignedBigInt(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );

    return new Contract__subscribersDataResult(
      result[0].toAddress(),
      result[1].toString(),
      result[2].toBigInt(),
      result[3].toBigInt(),
      result[4].toBoolean(),
      result[5].toBoolean()
    );
  }

  try_subscribersData(
    param0: BigInt,
    param1: BigInt
  ): ethereum.CallResult<Contract__subscribersDataResult> {
    let result = super.tryCall(
      "subscribersData",
      "subscribersData(uint256,uint256):(address,string,uint256,uint256,bool,bool)",
      [
        ethereum.Value.fromUnsignedBigInt(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Contract__subscribersDataResult(
        value[0].toAddress(),
        value[1].toString(),
        value[2].toBigInt(),
        value[3].toBigInt(),
        value[4].toBoolean(),
        value[5].toBoolean()
      )
    );
  }

  subscriptionIndex4User(param0: Address, param1: BigInt): BigInt {
    let result = super.call(
      "subscriptionIndex4User",
      "subscriptionIndex4User(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );

    return result[0].toBigInt();
  }

  try_subscriptionIndex4User(
    param0: Address,
    param1: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "subscriptionIndex4User",
      "subscriptionIndex4User(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  symbol(): string {
    let result = super.call("symbol", "symbol():(string)", []);

    return result[0].toString();
  }

  try_symbol(): ethereum.CallResult<string> {
    let result = super.tryCall("symbol", "symbol():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  timestampToDate(timestamp: BigInt): Contract__timestampToDateResult {
    let result = super.call(
      "timestampToDate",
      "timestampToDate(uint256):(uint256,uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(timestamp)]
    );

    return new Contract__timestampToDateResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt()
    );
  }

  try_timestampToDate(
    timestamp: BigInt
  ): ethereum.CallResult<Contract__timestampToDateResult> {
    let result = super.tryCall(
      "timestampToDate",
      "timestampToDate(uint256):(uint256,uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(timestamp)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Contract__timestampToDateResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt()
      )
    );
  }

  tokenForPayment(): Address {
    let result = super.call(
      "tokenForPayment",
      "tokenForPayment():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_tokenForPayment(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "tokenForPayment",
      "tokenForPayment():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  tokenForReceipt(): Address {
    let result = super.call(
      "tokenForReceipt",
      "tokenForReceipt():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_tokenForReceipt(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "tokenForReceipt",
      "tokenForReceipt():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  totalSubAvailiable(): BigInt {
    let result = super.call(
      "totalSubAvailiable",
      "totalSubAvailiable():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_totalSubAvailiable(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "totalSubAvailiable",
      "totalSubAvailiable():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  unSubscribe(_planId: BigInt, _user: Address): boolean {
    let result = super.call(
      "unSubscribe",
      "unSubscribe(uint256,address):(bool)",
      [
        ethereum.Value.fromUnsignedBigInt(_planId),
        ethereum.Value.fromAddress(_user)
      ]
    );

    return result[0].toBoolean();
  }

  try_unSubscribe(
    _planId: BigInt,
    _user: Address
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "unSubscribe",
      "unSubscribe(uint256,address):(bool)",
      [
        ethereum.Value.fromUnsignedBigInt(_planId),
        ethereum.Value.fromAddress(_user)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  userToSubscriptions(param0: Address, param1: BigInt): BigInt {
    let result = super.call(
      "userToSubscriptions",
      "userToSubscriptions(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );

    return result[0].toBigInt();
  }

  try_userToSubscriptions(
    param0: Address,
    param1: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "userToSubscriptions",
      "userToSubscriptions(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  viewPlan(_planId: BigInt): Contract__viewPlanResultPlanStruct {
    let result = super.call(
      "viewPlan",
      "viewPlan(uint256):((string,uint256,uint256,bool,uint256,uint256))",
      [ethereum.Value.fromUnsignedBigInt(_planId)]
    );

    return changetype<Contract__viewPlanResultPlanStruct>(result[0].toTuple());
  }

  try_viewPlan(
    _planId: BigInt
  ): ethereum.CallResult<Contract__viewPlanResultPlanStruct> {
    let result = super.tryCall(
      "viewPlan",
      "viewPlan(uint256):((string,uint256,uint256,bool,uint256,uint256))",
      [ethereum.Value.fromUnsignedBigInt(_planId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<Contract__viewPlanResultPlanStruct>(value[0].toTuple())
    );
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _name(): string {
    return this._call.inputValues[0].value.toString();
  }

  get _symbol(): string {
    return this._call.inputValues[1].value.toString();
  }

  get _nftId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _admin(): Address {
    return this._call.inputValues[3].value.toAddress();
  }

  get _factoryContract(): Address {
    return this._call.inputValues[4].value.toAddress();
  }

  get _tokenForReceipt(): Address {
    return this._call.inputValues[5].value.toAddress();
  }

  get _tokenForPayment(): Address {
    return this._call.inputValues[6].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ActivatePlanCall extends ethereum.Call {
  get inputs(): ActivatePlanCall__Inputs {
    return new ActivatePlanCall__Inputs(this);
  }

  get outputs(): ActivatePlanCall__Outputs {
    return new ActivatePlanCall__Outputs(this);
  }
}

export class ActivatePlanCall__Inputs {
  _call: ActivatePlanCall;

  constructor(call: ActivatePlanCall) {
    this._call = call;
  }

  get _planId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class ActivatePlanCall__Outputs {
  _call: ActivatePlanCall;

  constructor(call: ActivatePlanCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class AdminWithdrawalCall extends ethereum.Call {
  get inputs(): AdminWithdrawalCall__Inputs {
    return new AdminWithdrawalCall__Inputs(this);
  }

  get outputs(): AdminWithdrawalCall__Outputs {
    return new AdminWithdrawalCall__Outputs(this);
  }
}

export class AdminWithdrawalCall__Inputs {
  _call: AdminWithdrawalCall;

  constructor(call: AdminWithdrawalCall) {
    this._call = call;
  }

  get _amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _admin(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class AdminWithdrawalCall__Outputs {
  _call: AdminWithdrawalCall;

  constructor(call: AdminWithdrawalCall) {
    this._call = call;
  }
}

export class ChainlinkDailyCallCall extends ethereum.Call {
  get inputs(): ChainlinkDailyCallCall__Inputs {
    return new ChainlinkDailyCallCall__Inputs(this);
  }

  get outputs(): ChainlinkDailyCallCall__Outputs {
    return new ChainlinkDailyCallCall__Outputs(this);
  }
}

export class ChainlinkDailyCallCall__Inputs {
  _call: ChainlinkDailyCallCall;

  constructor(call: ChainlinkDailyCallCall) {
    this._call = call;
  }
}

export class ChainlinkDailyCallCall__Outputs {
  _call: ChainlinkDailyCallCall;

  constructor(call: ChainlinkDailyCallCall) {
    this._call = call;
  }
}

export class CreatePlanCall extends ethereum.Call {
  get inputs(): CreatePlanCall__Inputs {
    return new CreatePlanCall__Inputs(this);
  }

  get outputs(): CreatePlanCall__Outputs {
    return new CreatePlanCall__Outputs(this);
  }
}

export class CreatePlanCall__Inputs {
  _call: CreatePlanCall;

  constructor(call: CreatePlanCall) {
    this._call = call;
  }

  get _planName(): string {
    return this._call.inputValues[0].value.toString();
  }

  get _planPrice(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _planDuration(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class CreatePlanCall__Outputs {
  _call: CreatePlanCall;

  constructor(call: CreatePlanCall) {
    this._call = call;
  }
}

export class DeactivatePlanCall extends ethereum.Call {
  get inputs(): DeactivatePlanCall__Inputs {
    return new DeactivatePlanCall__Inputs(this);
  }

  get outputs(): DeactivatePlanCall__Outputs {
    return new DeactivatePlanCall__Outputs(this);
  }
}

export class DeactivatePlanCall__Inputs {
  _call: DeactivatePlanCall;

  constructor(call: DeactivatePlanCall) {
    this._call = call;
  }

  get _planId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class DeactivatePlanCall__Outputs {
  _call: DeactivatePlanCall;

  constructor(call: DeactivatePlanCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class SubscribeCall extends ethereum.Call {
  get inputs(): SubscribeCall__Inputs {
    return new SubscribeCall__Inputs(this);
  }

  get outputs(): SubscribeCall__Outputs {
    return new SubscribeCall__Outputs(this);
  }
}

export class SubscribeCall__Inputs {
  _call: SubscribeCall;

  constructor(call: SubscribeCall) {
    this._call = call;
  }

  get _userEmail(): string {
    return this._call.inputValues[0].value.toString();
  }

  get _autoSubscribe(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }

  get _planId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _user(): Address {
    return this._call.inputValues[3].value.toAddress();
  }
}

export class SubscribeCall__Outputs {
  _call: SubscribeCall;

  constructor(call: SubscribeCall) {
    this._call = call;
  }

  get userId(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class UnSubscribeCall extends ethereum.Call {
  get inputs(): UnSubscribeCall__Inputs {
    return new UnSubscribeCall__Inputs(this);
  }

  get outputs(): UnSubscribeCall__Outputs {
    return new UnSubscribeCall__Outputs(this);
  }
}

export class UnSubscribeCall__Inputs {
  _call: UnSubscribeCall;

  constructor(call: UnSubscribeCall) {
    this._call = call;
  }

  get _planId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _user(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class UnSubscribeCall__Outputs {
  _call: UnSubscribeCall;

  constructor(call: UnSubscribeCall) {
    this._call = call;
  }

  get success(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}
